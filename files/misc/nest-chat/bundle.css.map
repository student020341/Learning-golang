{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/components/Header.svelte",
    "../src/components/Controls.svelte",
    "../src/components/Messages.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\r\n    // only vars in this component are passed in\r\n    export let userId = \"\";\r\n    export let connection;\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n    h4 { \r\n        margin: 0;\r\n        padding: 8px;\r\n        border: 1px solid black;\r\n        border-bottom: none;\r\n    }\r\n\r\n    h4 .name {\r\n        color: #76a4b3;\r\n    }\r\n</style>\r\n\r\n<!-- explicit promise handling for templates! -->\r\n<h4>\r\n    Nest-Chat:\r\n    {#await connection}\r\n    connecting...\r\n    {:then resolved}\r\n    connected as <span class=\"name\">{userId}</span>\r\n    {:catch exception}\r\n    connection failed\r\n    {/await}\r\n</h4>\r\n",
    "\r\n<script>\r\n    // disable ui until connection is open\r\n    export let ready;\r\n\r\n    import { createEventDispatcher } from 'svelte';\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n    let outgoingMessage = \"\";\r\n    async function sendMessage () {\r\n\t\t// ignore empty string submission\r\n        if (!outgoingMessage) { return; }\r\n        // dispatch will send the message up to the parent component to send the message\r\n        // to the server\r\n        dispatch(\"sendMessage\", { message: outgoingMessage });\r\n        outgoingMessage = \"\";\r\n    }\r\n\r\n    function handleKeyPress(event) {\r\n\t\t// enter key\r\n\t\tif (event.which === 13) {\r\n\t\t\tsendMessage();\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style type=\"text/scss\">.controls {\n  padding: 8px;\n  border: 1px solid black;\n  border-top: none; }\n  .controls input, .controls button {\n    margin: 0; }\n\n/*# sourceMappingURL=x.map */</style>\r\n\r\n<div class=\"controls\">\r\n    {#if ready}\r\n    <div>\r\n        <input type=\"text\" maxlength=\"512\" bind:value={outgoingMessage} on:keypress={handleKeyPress} />\r\n        <button on:click={sendMessage}>send</button>\r\n    </div>\r\n    {/if}\r\n</div>\r\n",
    "<script>\r\n\r\nexport let messageList = [];\r\nexport let userId = \"\";\r\n\r\nimport { tick } from 'svelte';\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch = createEventDispatcher();\r\n\r\n// bound in template to allow node to be scrolled\r\nlet messageListNode;\r\n\r\nfunction removeMessage(message) {\r\n    dispatch(\"hide\", {mid: message.id});\r\n}\r\n\r\n// messageListNode moved here to avoid the observer magic\r\nfunction scrollContainer() {\r\n    messageListNode.scrollTop = messageListNode.scrollHeight;\r\n}\r\n\r\n// svelte syntax for observe/compute\r\n$: {\r\n    // tell svelte to run this code every time the message list is updated\r\n    messageList;\r\n\r\n    // scroll the chat down after the message list changes\r\n    tick().then(scrollContainer);\r\n}\r\n\r\n</script>\r\n\r\n<style type=\"text/scss\">.messages {\n  padding: 8px;\n  border: 1px solid black; }\n\n.messages ul {\n  padding: 0;\n  margin: 0;\n  height: 400px;\n  overflow: auto; }\n\nul.list {\n  list-style: none; }\n  ul.list li {\n    color: gray; }\n    ul.list li .time {\n      color: #76a4b3; }\n    ul.list li.other {\n      color: black; }\n      ul.list li.other .time {\n        color: blue; }\n\n.delete {\n  color: red;\n  cursor: pointer; }\n\n/*# sourceMappingURL=x.map */</style>\r\n\r\n<div class=\"messages\">\r\n    <ul class=\"list\" bind:this={messageListNode} >\r\n        {#each messageList as message (message.id)}\r\n            <li class={message.user === userId ? \"\" : \"other\"}>\r\n                {#if message.user === userId}\r\n                <span class=\"delete\" title=\"Remove Message\" on:click={() => removeMessage(message)}>[x]</span>\r\n                {/if}\r\n                <span class=\"time\">\r\n                    {message.user}@{message.time}\r\n                </span>\r\n                : {message.message}\r\n            </li>\r\n        {/each}\r\n    </ul>\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAUI,EAAE,eAAC,CAAC,AACA,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,aAAa,CAAE,IAAI,AACvB,CAAC,AAED,iBAAE,CAAC,KAAK,eAAC,CAAC,AACN,KAAK,CAAE,OAAO,AAClB,CAAC;ACOmB,SAAS,eAAC,CAAC,AACjC,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,UAAU,CAAE,IAAI,AAAE,CAAC,AACnB,wBAAS,CAAC,oBAAK,CAAE,wBAAS,CAAC,MAAM,eAAC,CAAC,AACjC,MAAM,CAAE,CAAC,AAAE,CAAC;ACCQ,SAAS,eAAC,CAAC,AACjC,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAAE,CAAC,AAE5B,wBAAS,CAAC,EAAE,eAAC,CAAC,AACZ,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,IAAI,AAAE,CAAC,AAEnB,EAAE,KAAK,eAAC,CAAC,AACP,UAAU,CAAE,IAAI,AAAE,CAAC,AACnB,EAAE,oBAAK,CAAC,EAAE,eAAC,CAAC,AACV,KAAK,CAAE,IAAI,AAAE,CAAC,AACd,EAAE,oBAAK,CAAC,EAAE,CAAC,KAAK,eAAC,CAAC,AAChB,KAAK,CAAE,OAAO,AAAE,CAAC,AACnB,EAAE,oBAAK,CAAC,EAAE,MAAM,eAAC,CAAC,AAChB,KAAK,CAAE,KAAK,AAAE,CAAC,AACf,EAAE,oBAAK,CAAC,EAAE,MAAM,CAAC,KAAK,eAAC,CAAC,AACtB,KAAK,CAAE,IAAI,AAAE,CAAC,AAEtB,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,OAAO,AAAE,CAAC"
}